{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","props","theme","mode","fetch","process","then","response","json","data","console","log","handleButton","wave","document","querySelector","classList","add","setTimeout","remove","startWave","App","useState","setTheme","className","onChange","e","type","name","value","placeholder","required","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+ZAGA,IAAMA,EAAcC,YAAH,KAEC,SAAAC,GAAK,MAAyB,SAArBA,EAAMC,MAAMC,KAAkB,UAAY,aACxD,SAAAF,GAAK,MAAyB,SAArBA,EAAMC,MAAMC,KAAkB,4BAA8B,aACpE,SAAAF,GAAK,MAAyB,SAArBA,EAAMC,MAAMC,KAAkB,qBAAuB,aAC1D,SAAAF,GAAK,MAAyB,SAArBA,EAAMC,MAAMC,KAAkB,UAAY,aAIrEC,MAAM,qEAAD,OAAsEC,qCAC1EC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIC,QAAQC,IAAIF,MAE1B,IAeMG,EAAe,YAfH,WAChB,IAAMC,EAAOC,SAASC,cAAc,SACpCF,EAAKG,UAAUC,IAAI,gBACnBC,YAAW,WAAOL,EAAKG,UAAUG,OAAO,kBAAmB,KAa3DC,GARgBN,SAASC,cAAc,gBAI7BC,UAAUG,OAAO,SAgDdE,MAxCf,WAAgB,IAAD,EACaC,mBAAS,CAACnB,KAAM,UAD7B,mBACND,EADM,KACCqB,EADD,KAGb,OACE,kBAAC,IAAD,CAAerB,MAAOA,GACpB,kBAACH,EAAD,MACA,yBAAKyB,UAAU,WACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,eACb,2BAAOA,UAAU,SACf,yBAAKA,UAAU,UACb,2BAAOC,SACL,SAAAC,GAAC,OAAIH,EAAwB,SAAfrB,EAAMC,KAAkB,CAACA,KAAM,SAAW,CAACA,KAAM,UAC/DqB,UAAU,eAAeG,KAAK,WAAWC,KAAK,QAAQC,MAAM,UAC9D,yBAAKL,UAAU,eAEjB,yBAAKA,UAAU,cAAf,eAGJ,yBAAKA,UAAU,UACb,2BAAOG,KAAK,OAAOH,UAAU,gBAAgBM,YAAY,iBAAiBC,UAAQ,KAEpF,yBAAKP,UAAU,kBACb,yBAAKA,UAAU,SACf,4BAAQQ,QAAS,kBAAMpB,MAAvB,YAGJ,yBAAKY,UAAU,mBACb,yBAAKA,UAAU,yBCpDLS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1B,SAAS2B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.54dfa94a.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {ThemeProvider, createGlobalStyle} from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n:root {\n  --main-color: ${props => props.theme.mode === 'dark' ? '#091921' : '#ecf0f3'};\n  --light: ${props => props.theme.mode === 'dark' ? 'rgba(255, 255, 255, 0.05)' : '#ffffff'};\n  --shadow: ${props => props.theme.mode === 'dark' ? 'rgba(0, 0, 0, 0.3)' : '#d1d9e6'};\n  --font-color: ${props => props.theme.mode === 'dark' ? '#ecf0f3' : '#091921'};\n}\n`\n\nfetch(`https://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=${process.env.REACT_APP_WEATHER_API_KEY}`)\n.then(response => response.json())\n.then(data => console.log(data));\n  \nconst startWave = () => {\n  const wave = document.querySelector('.wave');\n  wave.classList.add('wave-animate');\n  setTimeout(() => {wave.classList.remove('wave-animate');}, 1000);\n}\nconst startSearch = () => {\n  // const button = document.querySelector('.button-wrapper');\n  // const search = document.querySelector('.search');\n  const content = document.querySelector('.content-box');\n  // button.classList.remove('transform');\n  // search.classList.remove('transform');\n  // setTimeout(() => {\n    content.classList.remove('hide')\n  // }, 700)\n}\nconst handleButton = () => {\n  startWave();\n  startSearch();\n}\n\nfunction App() {\n  const [theme, setTheme] = useState({mode: 'light'});\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle/>\n      <div className=\"wrapper\">\n        <div className=\"top-wrapper\">\n          <div className=\"switch-mode\">\n            <label className=\"label\">\n              <div className=\"toggle\">\n                <input onChange={\n                  e => setTheme(theme.mode === 'dark' ? {mode: 'light'} : {mode: 'dark'})\n                } className=\"toggle-state\" type=\"checkbox\" name=\"check\" value=\"check\" />\n                <div className=\"indicator\"></div>\n              </div>\n              <div className=\"label-text\">dark mode</div>\n            </label>\n          </div>\n          <div className=\"search\">\n            <input type=\"text\" className=\"search__input\" placeholder=\"FInd your city\" required/>\n          </div>\n          <div className=\"button-wrapper\">\n            <div className=\"wave\"></div>\n            <button onClick={() => handleButton()}>Search</button>\n          </div>\n        </div>\n        <div className=\"content-wrapper\">\n          <div className=\"content-box hide\">\n          </div>\n        </div>\n      </div>\n    </ThemeProvider>\n  )\n}\n\n\n    \n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}