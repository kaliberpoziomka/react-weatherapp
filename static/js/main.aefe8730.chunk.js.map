{"version":3,"sources":["js/startSearch.js","js/startWave.js","js/removeIcons.js","js/handleButton.js","js/toggle.js","App.js","serviceWorker.js","index.js"],"names":["startSearch","button","document","querySelector","search","content","classList","remove","setTimeout","startWave","wave","add","removeIcons","handleButton","toggle","box","icon","wrapperClass","logo","GlobalStyle","createGlobalStyle","props","theme","mode","App","useState","query","setQuery","weather","setWeather","setTheme","themeText","setThemeText","className","onChange","e","type","name","value","placeholder","target","required","onClick","fetch","process","then","response","json","data","console","log","clouds","all","rain","undefined","catch","err","cod","main","sys","country","description","Math","floor","temp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.aefe8730.chunk.js","sourcesContent":["// Moves search-bar and button up after entering the text\n\nconst startSearch = () => {\n    const button = document.querySelector('.button-wrapper');\n    const search = document.querySelector('.search');\n    const content = document.querySelector('.content-box');\n    button.classList.remove('transform');\n    search.classList.remove('transform');\n    setTimeout(() => {\n      content.classList.remove('hide')\n    }, 700)\n  }\n\n  export default startSearch;","const startWave = () => {\n    const wave = document.querySelector('.wave');\n    wave.classList.add('wave-animate');\n    setTimeout(() => {wave.classList.remove('wave-animate');}, 1000);\n  }\n\nexport default startWave;","function removeIcons () {\n\n    // Remove icons\n    const box = document.querySelector('.content-box');\n    box.classList.remove('light-sun', 'light-clouds', 'light-rain', 'light-suncloud', 'dark-sun', 'dark-clouds', 'dark-rain', 'dark-suncloud');\n}\n\nexport default removeIcons;","// All action made after clicking a button\n\nimport startSearch from './startSearch';\nimport startWave from './startWave';\nimport removeIcons from './removeIcons';\n\nconst handleButton = () => {\n    startWave();\n    startSearch();\n    removeIcons();\n}\n\nexport default handleButton;","import removeIcons from './removeIcons';\n\nfunction toggle() {\n\n    // Change toggle position\n    const search = document.querySelector('.search__input');\n    search.classList.add('toggle');\n    setTimeout(() => {\n        search.classList.remove('toggle');\n    }, 1);\n\n    // Changing icon classes dark/light\n    let box = document.querySelector('.content-box').classList;\n    let icon = document.querySelector('.content-box').classList[1];\n    removeIcons();\n    switch(icon) {\n        case 'light-sun':\n            box.add('dark-sun');\n            break;\n        case 'dark-sun':\n            box.add('light-sun');\n            break;\n        case 'light-suncloud':\n            box.add('dark-suncloud');\n            break;\n        case 'dark-suncloud':\n            box.add('light-suncloud');\n            break;\n        case 'light-clouds':\n            box.add('dark-clouds');\n            break;\n        case 'dark-clouds':\n            box.add('light-clouds');\n            break;\n        case 'light-rain':\n            box.add('dark-rain');\n            break;\n        case 'dark-rain':\n            box.add('light-rain');\n            break;\n    }\n\n    // Switch logo\n    let wrapperClass = document.querySelector('.wrapper').classList;\n    let logo = document.querySelector('.wrapper').classList[1];\n\n    // Remove logo\n    const wrapper = document.querySelector('.wrapper');\n    wrapper.classList.remove('light-logo', 'dark-logo');\n\n    switch(logo) {\n        case 'light-logo':\n            wrapperClass.add('dark-logo');\n            break;\n        case 'dark-logo':\n            wrapperClass.add('light-logo');\n            break;\n    }\n\n}\n\nexport default toggle;","import React, {useState} from 'react';\nimport {ThemeProvider, createGlobalStyle} from 'styled-components';\nimport handleButton from './js/handleButton';\nimport toggle from './js/toggle';\n\n\nconst GlobalStyle = createGlobalStyle`\n:root {\n  --main-color: ${props => props.theme.mode === 'dark' ? '#091921' : '#ecf0f3'};\n  --light: ${props => props.theme.mode === 'dark' ? 'rgba(255, 255, 255, 0.05)' : '#ffffff'};\n  --shadow: ${props => props.theme.mode === 'dark' ? 'rgba(0, 0, 0, 0.3)' : '#d1d9e6'};\n  --font-color: ${props => props.theme.mode === 'dark' ? '#ecf0f3' : '#091921'};\n}\n`\n\nfunction App() {\n\n// Fetching weahter API\nconst [query, setQuery] = useState('');\nconst [weather, setWeather] = useState({});\n\n// Theme useState\nconst [theme, setTheme] = useState({mode: 'light'});\nconst [themeText, setThemeText] = useState('light');\n\n// Defining content box\nconst box = document.querySelector('.content-box');\n\nconst fetchData = () => {\n  \n  fetch(`https://api.openweathermap.org/data/2.5/weather?q=${query}&appid=${process.env.REACT_APP_WEATHER_API_KEY}`)\n  .then(response => response.json())\n  .then(data => {\n    setWeather(data);\n    console.log(data);\n    setQuery('');\n    if(data.clouds.all  < 10) {\n      box.classList.add(`${themeText}-sun`);\n      console.log(data.rain);\n      console.log(data.clouds.all);\n    } else if (data.clouds.all < 50) {\n      box.classList.add(`${themeText}-suncloud`);\n    } else if (data.clouds.all >= 50) {\n      if (data.rain != undefined) {\n        box.classList.add(`${themeText}-rain`);\n      } else {\n        box.classList.add(`${themeText}-clouds`);\n      }\n    }\n  })\n  .catch((err) => {\n    console.log(err.cod);\n  });\n}\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle/>\n      <div className=\"wrapper light-logo\">\n        <div className=\"top-wrapper\">\n          <div className=\"switch-mode\">\n            <label className=\"label\">\n              <div className=\"toggle\">\n                <input onChange={\n                  e => {\n                    toggle();\n                    setTheme(theme.mode === 'dark' ? {mode: 'light'} : {mode: 'dark'});\n                    setThemeText(themeText === 'light' ? 'dark' : 'light');\n                }\n                } className=\"toggle-state\" type=\"checkbox\" name=\"check\" value=\"check\" />\n                <div className=\"indicator\"></div>\n              </div>\n              <div className=\"label-text\">{themeText} mode</div>\n            </label>\n          </div>\n          <div className=\"search transform\">\n            <input \n              type=\"text\" \n              className=\"search__input\" \n              placeholder=\"Find your city\" \n              onChange={e => setQuery(e.target.value)} \n              value={query}\n              required/>\n          </div>\n          <div className=\"button-wrapper transform\">\n            <div className=\"wave\"></div>\n            <button \n              onClick={\n                () => {\n                  fetchData();\n                  handleButton();\n                      }\n                }>Search</button>\n          </div>\n        </div>\n        <div className=\"content-wrapper\">\n          <div className=\"content-box hide\">\n              {(typeof weather.main != \"undefined\") ? (\n                  <div className=\"content-info\">\n                    <p>{weather.name}, {weather.sys.country}</p>\n                    <p>Clouds: {weather.clouds.all}%</p>\n                    <p> {weather.weather[0].description}</p>\n                    <p> {Math.floor( weather.main.temp - 273.15 )} °C</p>\n                  </div>\n              ) : (\n                <div>\n                  <p>We can't find that city, please check spelling</p>\n                </div>\n              )}\n          </div>\n        </div>\n      </div>\n    </ThemeProvider>\n  )\n}\n\n\n    \n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/main.js';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}